#include <Arduino.h>
#include <QTRSensors.h>
#include <ESP32Servo.h>

#define MOTOR_IN1 5
#define MOTOR_IN2 4
#define BASESPED 55
#define STOP 0
#define TRIGGER 6
#define ECHO 7

TaskHandle_t Task1;
TaskHandle_t Task2;

//------------ svet
bool is_red = true;
bool is_stop_lin = true;
int porog = 250;

int dist = 0;

//------------ irda
int sensor = 0;
int lastFilter = 0;

//------------ qtr sensor
QTRSensors qtr;

const uint8_t SensorCount = 10;
uint16_t sensorValues[SensorCount];
int sensetivity = 1000;
int pos = 0;

bool is_line_passing = false;
bool is_line_passed = false;

uint16_t position;

struct line_data
{
  uint32_t pos = 0;
  size_t start = 0, end = 0;

  int len()
  {
    return end - start;
  }
};

line_data lines[2];
line_data old_line;

size_t line_n = 0;
int line_len = 0;

//------------ servo
Servo myServo;

//------------ motor
int speed = BASESPED;

//------------ pid
class PID
{
  float p, i, d;
  float old_error = 0;
  float integral = 0;

  float start_time;

public:
  PID(float kp, float ki, float kd)
  {
    p = kp;
    i = ki;
    d = kd;

    start_time = millis();
  }

  int get_angle(int centr)
  {
    int error = centr - 4500;

    int time = millis();
    // if (start_time - time > 30 * 1000) {
    //   start_time = millis();
    // }
    integral += error * i;
    float integ = integral / (start_time - time);

    int derivative = error - old_error;

    int angle = (p * error + integ + d * derivative) + 90;

    old_error = error;

    return min(max(angle, 57), 123);
  }
};

PID pid{0.015, 0.0025, 0.04}; // { 0.01, 0.004, 0.06 };  //{0.015, 0.0025, 0.04}; // {0.02, 0.003, 0.04}; //{0.015, 0.0025, 0.05}; // 0.015 0.003 0.03

int angle = 90;

void setup()
{
  Serial.begin(115200);
  Serial2.begin(115200);
  // setup pins
  pinMode(MOTOR_IN1, OUTPUT);
  pinMode(MOTOR_IN2, OUTPUT);
  myServo.attach(11);

  // qtr setup
  qtr.setTypeAnalog();
  qtr.setSensorPins((const uint8_t[]){
                        },
                    SensorCount);
  // qtr calibration
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH);
  for (uint16_t i = 0; i < 200; i++)
  {
    qtr.calibrate();
    delay(10);
  }
  digitalWrite(LED_BUILTIN, LOW);

  xTaskCreatePinnedToCore(
      Task1code, /* Функция задачи. */
      "Task1",   /* Ее имя. */
      10000,     /* Размер стека функции */
      NULL,      /* Параметры */
      1,         /* Приоритет */
      &Task1,    /* Дескриптор задачи для отслеживания */
      0);        /* Указываем пин для данного ядра */
  delay(500);

  xTaskCreatePinnedToCore(
      Task2code, /* Функция задачи. */
      "Task2",   /* Имя задачи. */
      10000,     /* Размер стека */
      NULL,      /* Параметры задачи */
      1,         /* Приоритет */
      &Task2,    /* Дескриптор задачи для отслеживания */
      1);        /* Указываем пин для этой задачи */
  delay(500);
}

void Task1code(void *pvParameters)
{
  for (;;)
  {
    speed = min(BASESPED, speed + 1);
    // dist = distant(100);

    // Serial.println(is_red);

    if (analogRead(A6) > porog && analogRead(A10) > porog)
    {
      is_stop_lin = true;
    }
    else
    {
      is_stop_lin = false;
    }

    if ((is_red && is_stop_lin))
    {
      speed = 0;
    }
    else if (is_red)
    {
      speed = BASESPED / 2;
    }
    analogWrite(MOTOR_IN1, speed);
    analogWrite(MOTOR_IN2, LOW);

    // get centr line
    // qtr.readLineBlack
    qtr.readCalibrated(sensorValues, QTRReadMode::On);

    find_centers();

    pos = get_cool_line().pos;

    if (!is_line_passed)
    {
      if (line_n <= 1 && is_line_passing)
      {
        is_line_passed = true;
      }
      else if (line_n > 1)
      {
        is_line_passing = true;
      }
    }

    // get angle
    angle = pid.get_angle(pos);
    if (is_stop_lin)
    {
      angle = 90;
    }

    // write
    myServo.write(angle);

    delay(5);
  }
}

void Task2code(void *pvParameters)
{
  for (;;)
  {
    irDa();
  }
}

void loop()
{
}

void irDa()
{
  if (Serial2.available() > 0)
  {
    lastFilter = Serial2.read();
    if (lastFilter > -1 && lastFilter < 7)
    {
      sensor = lastFilter;
    }
    if (sensor == 0 || sensor == 1 || sensor == 4)
    {
      is_red = true;
    }
    else if (sensor == 2 || sensor == 3)
    {
      is_red = false;
    }
  }
  else
  {
    is_red = false;
  }
}

void find_centers()
{
  size_t line_start = 0, line_end = 0;

  line_n = 0;
  line_len = 0;
  for (size_t i = 0; i < SensorCount; ++i)
  {
    if (line_n >= 2)
    {
      break;
    }
    if (sensorValues[i] > qtr.calibrationOn.maximum[i])
    {
      line_len++;
      if (!line_start)
      {
        line_start = i + 1;
      }
    }
    else if (sensorValues[i] < qtr.calibrationOn.maximum[i] && line_start)
    {
      line_end = i;

      uint32_t avg = 0;
      uint16_t sum = 0;

      for (uint8_t i = line_start - 1; i < line_end; i++)
      {
        uint16_t value = sensorValues[i];

        if (value > 50)
        {
          avg += (uint32_t)value * (i * 1000);
          sum += value;
        }
      }
      lines[line_n].pos = min((int)(avg / sum), 9000);
      lines[line_n].start = line_start;
      lines[line_n].end = line_end;

      line_n++;
      line_start = 0;
      line_end = 0;

      line_len = 0;
    }
  }
  if (line_start)
  {
    line_end = 9;

    uint32_t avg = 0;
    uint16_t sum = 0;

    for (uint8_t i = line_start - 1; i < line_end; i++)
    {
      uint16_t value = sensorValues[i];

      if (value > 50)
      {
        avg += (uint32_t)value * (i * 1000);
        sum += value;
      }
    }
    lines[line_n].pos = min((int)(avg / sum), 9000);
    lines[line_n].start = line_start;
    lines[line_n].end = line_end;
    line_n++;
  }
}

line_data get_cool_line()
{
  line_data cool_line = old_line;
  if (is_stop_lin)
  {
    cool_line.pos = 4500;
    return cool_line;
  }
  if (!is_line_passed)
  {
    for (size_t i = line_n - 1; i >= 0; --i)
    {
      line_data lin = lines[i];

      if (lin.len() <= 3)
      {
        cool_line = lin;
        break;
      }
      is_stop_lin = true;
    }
  }
  else
  {
    for (size_t i = 0; i < line_n; ++i)
    {
      line_data lin = lines[i];

      if (lin.len() <= 3)
      {
        cool_line = lin;
        break;
      }
      is_stop_lin = true;

      // if (lin.len() > 3)
      // {
      //     is_stop_lin = true;
      //     continue;
      // }

      // if (abs(cool_line.pos - 4500) > abs(lin.pos - 4500))
      // {
      //     cool_line = lin;
      // }
    }
  }
  old_line = cool_line;
  return cool_line;
}